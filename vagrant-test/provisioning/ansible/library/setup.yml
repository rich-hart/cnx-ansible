# setup
- name: update apt-get
  apt: update_cache=yes
- name:  Install packages
  apt: name={{item}} state=present
  with_items:
     - pkg-config
     - git
     - libxml2-dev
     - libxslt-dev 
     - python-pip
     - python-dev
     - postgresql-contrib-9.3
     - postgresql-plpython-9.3
     - postgresql-server-dev-9.3
     - memcached
- name: Update all packages to the latest version
  apt: upgrade=dist
- name: upgrade pip
  pip: name=pip extra_args='-U'
#- name: remove requests from pip #authoring resolves intercept error when running tests
#  shell: pip uninstall -y requests
#- name: install requests from apt-get # this can prob be removed 
#  apt: name=python-requests state=present
- name: upgrade requests #fixes authoring error  requests >= 2.7.0
  pip: name=requests extra_args='-U'
# plxslt
- name: Clone https://github.com/petere/plxslt.git repo
  git: repo=https://github.com/petere/plxslt.git dest=/home/vagrant/plxslt
- name: Setup plxslt
  shell:  make chdir=/home/vagrant/plxslt
- name: Install plxslt
  shell: make install chdir=/home/vagrant/plxslt 

# install_modules
- name: clone python repos
  git: repo=https://github.com/{{item.remote}}/{{item.repo}}.git dest=/home/vagrant/{{item.repo}} version={{item.branch}}
  with_items: modules
- name: install python modules
  pip: name=./ extra_args='-e' chdir=/home/vagrant/{{item.repo}}
  with_items: modules

# test modules
# change authentication settings.
# Note: these settings are prob. too lax
- name: change postgres peer authentication for testing
  lineinfile: dest=/etc/postgresql/9.3/main/pg_hba.conf regexp="local +all +all +peer"
              line="local   all             all                                trust"
- name: restart postgres #should be a handler
  shell: service postgresql restart

# set roles
- name: Set up archive postgres roles
  sudo: yes
  sudo_user: postgres
  postgresql_user: db=postgres name={{item}} password={{item}} role_attr_flags=SUPERUSER #login_host=default
  with_items:
    - cnxarchive
    - cnxauthoring
    - accounts
# create db
- name: drop archive
  sudo: yes
  sudo_user: postgres
  shell: dropdb --if-exists cnxarchive
- name: drop archive
  sudo: yes
  sudo_user: postgres
  shell: dropdb --if-exists cnxarchive-testing
- name: Set up archive testing database
  sudo: yes
  sudo_user: postgres
  postgresql_db: name=cnxarchive owner=cnxarchive #login_host=default
- name: Set up archive testing database
  sudo: yes
  sudo_user: postgres
  postgresql_db: name=cnxarchive-testing owner=cnxarchive #login_host=default
- name: drop authoring
  sudo: yes
  sudo_user: postgres
  shell: dropdb --if-exists cnxauthoring

- name: Set up authoring database
  sudo: yes
  sudo_user: postgres
  postgresql_db: name=authoring owner=cnxarchive #login_host=default
- name: drop authoring
  sudo: yes
  sudo_user: postgres
  shell: dropdb --if-exists authoring-test
- name: Set up authoring testing database
  sudo: yes
  sudo_user: postgres
  postgresql_db: name=authoring-test owner=cnxauthoring #login_host=default
- name: Set up accounts testing database
  sudo: yes
  sudo_user: postgres
  postgresql_db: name=accounts-test owner=accounts #login_host=default

# init db
- name: initialize archive
#  shell: cnx-archive-initdb --with-example-data development.ini chdir=/home/vagrant/cnx-archive
  shell: cnx-archive-initdb --with-example-data cnxarchive/tests/testing.ini chdir=/home/vagrant/cnx-archive
#- name: make development script for  authoring
#  shell: cp development.ini.example development.ini chdir=/home/vagrant/cnx-authoring
- name: initialize authoring
  sudo: yes
  sudo_user: postgres
#  shell: cnx-authoring-initialize_db  development.ini chdir=/home/vagrant/cnx-authoring
  shell: cnx-authoring-initialize_db  cnxauthoring/tests/testing.ini chdir=/home/vagrant/cnx-authoring



# run tests
- name: run archive tests
  shell: python setup.py test chdir=/home/vagrant/cnx-archive
  notify:
     - restart memcached

- name: run authoring tests
  shell: python setup.py test chdir=/home/vagrant/cnx-authoring

- name: drop archive
  sudo: yes
  sudo_user: postgres
  shell: dropdb --if-exists cnxarchive-testing
- name: Set up archive testing database
  sudo: yes
  sudo_user: postgres
  postgresql_db: name=cnxarchive-testing owner=cnxarchive #login_host=default

# test publishing
#- name: init publish db
#  shell: cnx-publishing-initdb testing.ini chdir=/home/vagrant/cnx-publishing
- name: run publishing tests
  shell: python setup.py test chdir=/home/vagrant/cnx-publishing



